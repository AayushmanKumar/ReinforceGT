# --- Question 1: Pure Nash Equilibrium Checker ---

# Define the payoff matrix for the Prisoner's Dilemma.
# The keys are tuples of actions (Player 1's action, Player 2's action).
# The values are tuples of payoffs (Player 1's payoff, Player 2's payoff).
prisoners_dilemma_payoff = {
    ('C', 'C'): (3, 3),
    ('C', 'D'): (0, 5),
    ('D', 'C'): (5, 0),
    ('D', 'D'): (1, 1)
}

def is_pure_nash_equilibrium(strategy_profile, payoff_matrix):
    """
    Checks if the given strategy_profile is a Pure Nash Equilibrium.
    strategy_profile: tuple (action1, action2)
    payoff_matrix: dict mapping (action1, action2) -> (payoff1, payoff2)
    Returns: True if strategy_profile is a Pure Nash Equilibrium, else False.
    """
    actions = ['C', 'D']
    a1, a2 = strategy_profile
    p1_payoff, p2_payoff = payoff_matrix[(a1, a2)]

    # Check if Player 1 can benefit by switching action
    for alt_a1 in actions:
        if alt_a1 != a1:
            alt_payoff = payoff_matrix[(alt_a1, a2)][0]
            if alt_payoff > p1_payoff:
                return False  # Player 1 can improve unilaterally

    # Check if Player 2 can benefit by switching action
    for alt_a2 in actions:
        if alt_a2 != a2:
            alt_payoff = payoff_matrix[(a1, alt_a2)][1]
            if alt_payoff > p2_payoff:
                return False  # Player 2 can improve unilaterally

    return True

def find_all_pure_nash_equilibria(payoff_matrix):
    """
    Finds all Pure Nash Equilibria in the given payoff matrix.
    Returns: List of strategy profiles that are Pure Nash Equilibria.
    """
    actions = ['C', 'D']
    equilibria = []
    for a1 in actions:
        for a2 in actions:
            if is_pure_nash_equilibrium((a1, a2), payoff_matrix):
                equilibria.append((a1, a2))
    return equilibria

# --- Question 2: Best Response Calculator ---

def best_response(payoff_matrix, player, opponent_action):
    """
    Returns the set of best responses for a player given the opponent's action.
    payoff_matrix: Nested dict, e.g., payoff_matrix[player1_action][player2_action] = (p1_payoff, p2_payoff)
    player: 1 or 2
    opponent_action: The action taken by the other player
    Returns: Set of actions that are best responses.
    """
    actions = list(payoff_matrix.keys())  # Player 1's possible actions
    # For Player 2, get actions from inner dict
    if player == 2:
        actions = list(next(iter(payoff_matrix.values())).keys())

    best_payoff = None
    best_actions = set()

    for action in actions:
        # Determine the profile depending on which player is acting
        if player == 1:
            payoff = payoff_matrix[action][opponent_action][0]
        else:
            payoff = payoff_matrix[opponent_action][action][1]

        # Update best actions
        if (best_payoff is None) or (payoff > best_payoff):
            best_payoff = payoff
            best_actions = {action}
        elif payoff == best_payoff:
            best_actions.add(action)

    return best_actions

